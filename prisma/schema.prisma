generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  password            String
  name                String
  role                String
  createdAt           DateTime  @default(now())
  passwordResetToken  String? // nullable, for reset token
  passwordResetExpiry DateTime? // nullable, for expiry time

  applications  BikeRentalApplication[]
  RentalHistory RentalHistory[]
  leaderboards  Leaderboard[]
}

model Bike {
  id            String                  @id @default(uuid())
  name          String
  plateNumber   String?                 @unique
  amenities     String[]                @default([])
  latitude      Float?
  longitude     Float?
  status        String                  @default("available")
  createdAt     DateTime                @default(now())
  applications  BikeRentalApplication[]
  RentalHistory RentalHistory[]
}

model BikeRentalApplication {
  id                        String          @id @default(uuid())
  lastName                  String
  firstName                 String
  middleName                String?
  srCode                    String
  sex                       String
  dateOfBirth               DateTime
  phoneNumber               String
  email                     String
  collegeProgram            String
  gwaLastSemester           String
  extracurricularActivities String?
  houseNo                   String
  streetName                String
  barangay                  String
  municipality              String
  province                  String
  distanceFromCampus        String
  familyIncome              String
  intendedDuration          String
  intendedDurationOther     String?
  bike                      Bike?           @relation(fields: [bikeId], references: [id])
  bikeId                    String?
  certificatePath           String?
  status                    String          @default("pending")
  dueDate                   DateTime?
  assignedAt                DateTime?
  userId                    String
  user                      User            @relation(fields: [userId], references: [id])
  createdAt                 DateTime        @default(now())
  RentalHistory             RentalHistory[]
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  type        String
  adminName   String
  adminEmail  String
  description String
  createdAt   DateTime @default(now())
}

model RentalHistory {
  id            String                 @id @default(uuid())
  applicationId String?
  application   BikeRentalApplication? @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  userId        String
  user          User                   @relation(fields: [userId], references: [id])
  bikeId        String
  bike          Bike                   @relation(fields: [bikeId], references: [id])
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime               @default(now())
}

model Leaderboard {
  id          String   @id @default(uuid())
  name        String
  distanceKm  Float    @default(0)
  co2SavedKg  Float    @default(0)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
